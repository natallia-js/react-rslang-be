openapi: 3.0.0
info:
  title: React Learn Words
  description: a backend part of RSSchool-React "Learn words" task
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    GameStatistic:
      type: object
      properties:
        gameId:
          type: string
        bestSeries:
          type: number
        date:
          type: string
    WordStatistic:
      type: object
      properties:
        wordId:
          type: string
        gameId:
          type: string
        group:
          type: number
        page:
          type: number
        correctAnswerTotal:
          type: number
        wrongAnswerTotal:
          type: number
        studiedAt:
          type: string
    Game:
      type: object
      properties:
        name:
          type: string
        num:
          type: number
        img:
          type: string
    DeletedWordsAmount:
      type: object
      properties:
        group:
          type: number
        page:
          type: number
        count:
          type: number
    Word:
      type: object
      properties:
        id:
          type: string
        group:
          type: number
        page:
          type: number
        word:
          type: string
        image:
          type: string
        audio:
          type: string
        audioMeaning:
          type: string
        audioExample:
          type: string
        textMeaning:
          type: string
        textExample:
          type: string
        transcription:
          type: string
        wordTranslate:
          type: string
        textMeaningTranslate:
          type: string
        textExampleTranslate:
          type: string
    UserWord:
      type: object
      properties:
        wordId:
          type: string
        isDeleted:
          type: boolean
        isStudied:
          type: boolean
        isDifficult:
          type: boolean
        group:
          type: number
        page:
          type: number
        addedAt:
          type: string
        difficulty:
          type: string
        optional:
          type: object
          items:
            type: any
    Setting:
      type: object
      properties:
        wordsPerDay:
          type: number
        optional:
          type: object
          items:
            type: any
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        filedata:
          type: binary
    Auth:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        refreshToken:
          type: string
        userId:
          type: string
        name:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    UnauthenticatedError:
      description: Access token is missing, expired or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /users/{id}/statistic/games:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/Statistic
      summary: Get user game learning statistics
      description: Get user game learning statistics
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameStatistic"
        402:
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Users/Statistic
      summary: Add a user game learning statistic
      description: Add a user game learning statistic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                gameId:
                  type: string
                bestSeries:
                  type: number
                date:
                  type: string
      responses:
        200:
          description: The game statistic has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameStatistic"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/statistic/games/{gameStatisticId}:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: gameStatisticId
        description: gameStatisticId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Users/Statistic
      summary: Delete a user game learning statistic
      description: Deletes a user game learning statistic by id
      responses:
        204:
          description: The game statistic has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Users/Statistic
      summary: Update a user game learning statistic
      description: Updates a user game learning statistic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                gameId:
                  type: string
                bestSeries:
                  type: number
                date:
                  type: string
      responses:
        200:
          description: The game statistic has been updated.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/GameStatistic"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/statistic/words:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/Statistic
      summary: Get user word learning statistics
      description: Get user word learning statistics
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WordStatistic"
        402:
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Users/Statistic
      summary: Add a user word learning statistic
      description: Add a user word learning statistic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordId:
                  type: string
                gameId:
                  type: string
                group:
                  type: number
                page:
                  type: number
                correctAnswerTotal:
                  type: number
                wrongAnswerTotal:
                  type: number
                studiedAt:
                  type: string
      responses:
        200:
          description: The word statistic has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WordStatistic"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/statistic/words/{wordStatisticId}:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: wordStatisticId
        description: wordStatisticId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Users/Statistic
      summary: Delete a user word learning statistic
      description: Deletes a user word learning statistic by id
      responses:
        204:
          description: The word statistic has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Users/Statistic
      summary: Update a user word learning statistic
      description: Updates a user word learning statistic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordId:
                  type: string
                gameId:
                  type: string
                group:
                  type: number
                page:
                  type: number
                correctAnswerTotal:
                  type: number
                wrongAnswerTotal:
                  type: number
                studiedAt:
                  type: string
      responses:
        200:
          description: The word statistic has been updated.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/WordStatistic"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /games:
    get:
      tags:
        - Games
      security:
        [ ]
      summary: Get games
      description: Gets games
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
    post:
      tags:
        - Games
      security:
        [ ]
      summary: Add game
      description: Add a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: The game name
                num:
                  type: number
                  description: The unique game number
                img:
                  type: The name of game logo (optional)
      responses:
        200:
          description: Successful creation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Game"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /games/{gameNum}:
    parameters:
      - name: gameNum
        description: unique game number
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Games
      security:
        [ ]
      summary: Get a game with assets by num
      description: Gets a genre with assets by num
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: Game not found
    put:
      tags:
        - Games
      security:
        [ ]
      summary: Upsert game
      description: Upsert game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: The game name
                num:
                  type: number
                  description: The unique game number
                img:
                  type: The name of game logo (optional)
      responses:
        200:
          description: The game has been updated
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Game"
        400:
          description: Bad request
  /words:
    parameters:
      - name: group
        in: query
        required: false
        description: group number
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: page in the group
        schema:
          type: string
    get:
      tags:
        - Words
      security:
        []
      summary: Get a chunk of words
      description: Gets a chunk of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
  /words/all:
    get:
      tags:
        - Words
      security:
        []
      summary: Get all words
      description: Gets all words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
  /words/{id}:
    parameters:
      - name: id
        description: wordId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Words
      security:
        []
      summary: Get a word with assets by id
      description: Gets a word with assets by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Word"
  /users:
    post:
      tags:
        - Users
      security:
        []
      summary: Create a new user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: User name
                email:
                  type: string
                  description: E-mail
                password:
                  type: string
                  description: Password
      responses:
        200:
          description: Successful creation.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        422:
          description: Incorrect e-mail or password
  /users/{id}:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user
      description: Gets user
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user
      description: Updates a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: E-mail
                password:
                  type: string
                  description: Password
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Deletes a user by id
      responses:
        204:
          description: The user has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/tokens:
    parameters:
      - name: id
        description: user id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get new user tokens
      description: Gets new user tokens
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        403:
          $ref: '#/components/responses/UnauthenticatedError'
  /users/{id}/words:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/Words
      summary: Get all user words
      description: Gets all user words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWord"
        402:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/words/{wordId}:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: wordId
        description: wordId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Users/Words
      summary: Create a user word
      description: Create a user word by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                isDeleted:
                  type: boolean
                isDifficult:
                  type: boolean
                isStudied:
                  type: boolean
                group:
                  type: number
                page:
                  type: number
                addedAt:
                  type: string
                difficulty:
                  type: string
                optional:
                  type: object
                  items:
                    type: any
      responses:
        200:
          description: The user word has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - Users/Words
      summary: Get a user word by id
      description: Gets a user word by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User's word not found
    put:
      tags:
        - Users/Words
      summary: Upsert a user word
      description: Upserts a user word by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                isDeleted:
                  type: boolean
                isDifficult:
                  type: boolean
                isStudied:
                  type: boolean
                group:
                  type: number
                page:
                  type: number
                addedAt:
                  type: string
                difficulty:
                  type: string
                optional:
                  type: object
                  items:
                    type: any
      responses:
        200:
          description: The user word has been updated.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/UserWord"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Users/Words
      summary: Delete user word
      description: Deletes user words by id
      responses:
        204:
          description: The user word has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/words/amount/deleted:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/Words
      summary: Get number of deleted custom words
      description: Get number of deleted custom words on each group page
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeletedWordsAmount"
        402:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/aggregatedWords:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: group
        in: query
        required: false
        description: group(skip if you want result not depending on a group)
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: page number
        schema:
          type: string
      - name: wordsPerPage
        in: query
        required: false
        description: words per page
        schema:
          type: string
      - name: filter
        in: query
        required: false
        description: Filter by aggreagted word fields. It should be a stringified object which meet MongoDB Query object conditions.<br>
          Get all words that have difficulte="hard AND optional.key="value <pre>{"$and":[{"userWord.difficulty":"hard", "userWord.optional.key":"value"}]}</pre><br>
          Get all words that have difficulty equal="easy" OR do not have the linked userWord <pre>{"$or":[{"userWord.difficulty":"easy"},{"userWord":null}]}</pre><br>
          Get all words that have BOTH difficulty equal="easy" AND optional.repeat=true, OR do not have the linked userWord <pre>{"$or":[{"$and":[{"userWord.difficulty":"easy", "userWord.optional.repeat":true}]},{"userWord":null}]}</pre><br>
        schema:
          type: string
    get:
      tags:
        - Users/AggregatedWords
      summary: Get all user aggregated words
      description: Gets all user aggregated words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/aggregatedWords/{wordId}:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: wordId
        description: wordId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/AggregatedWords
      summary: Get a user aggregated word by id
      description: Gets a user aggregated word by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User's word not found
  /users/{id}/settings:
    parameters:
      - name: id
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users/Setting
      summary: Get settings
      description: Gets settings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Setting"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Settings not found
    put:
      tags:
        - Users/Setting
      summary: Upsert settings
      description: Upserts new settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordsPerDay:
                  type: number
                  description: The max number of learned words per day
                optional:
                  type: object
                  items:
                    type: any
      responses:
        200:
          description: The settings has been created.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Setting"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /signin:
    post:
      tags:
        - Sign In
      security:
        []
      summary: Sign in
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: E-mail
                password:
                  type: string
                  description: Password
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        403:
          description: Incorrect e-mail or password
